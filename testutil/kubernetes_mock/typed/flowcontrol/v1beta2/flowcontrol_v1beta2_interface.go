// Code generated by mockery 2.12.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	testing "testing"

	v1beta2 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta2"
)

// FlowcontrolV1beta2Interface is an autogenerated mock type for the FlowcontrolV1beta2Interface type
type FlowcontrolV1beta2Interface struct {
	mock.Mock
}

// FlowSchemas provides a mock function with given fields:
func (_m *FlowcontrolV1beta2Interface) FlowSchemas() v1beta2.FlowSchemaInterface {
	ret := _m.Called()

	var r0 v1beta2.FlowSchemaInterface
	if rf, ok := ret.Get(0).(func() v1beta2.FlowSchemaInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta2.FlowSchemaInterface)
		}
	}

	return r0
}

// PriorityLevelConfigurations provides a mock function with given fields:
func (_m *FlowcontrolV1beta2Interface) PriorityLevelConfigurations() v1beta2.PriorityLevelConfigurationInterface {
	ret := _m.Called()

	var r0 v1beta2.PriorityLevelConfigurationInterface
	if rf, ok := ret.Get(0).(func() v1beta2.PriorityLevelConfigurationInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta2.PriorityLevelConfigurationInterface)
		}
	}

	return r0
}

// RESTClient provides a mock function with given fields:
func (_m *FlowcontrolV1beta2Interface) RESTClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// NewFlowcontrolV1beta2Interface creates a new instance of FlowcontrolV1beta2Interface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFlowcontrolV1beta2Interface(t testing.TB) *FlowcontrolV1beta2Interface {
	mock := &FlowcontrolV1beta2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
