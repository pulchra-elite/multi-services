// Code generated by mockery 2.12.1. DO NOT EDIT.

package kubernetes_mocks

import (
	context "context"

	autoscalingv2 "k8s.io/api/autoscaling/v2"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v2 "k8s.io/client-go/applyconfigurations/autoscaling/v2"

	watch "k8s.io/apimachinery/pkg/watch"
)

// HorizontalPodAutoscalerInterface is an autogenerated mock type for the HorizontalPodAutoscalerInterface type
type HorizontalPodAutoscalerInterface struct {
	mock.Mock
}

// Apply provides a mock function with given fields: ctx, horizontalPodAutoscaler, opts
func (_m *HorizontalPodAutoscalerInterface) Apply(ctx context.Context, horizontalPodAutoscaler *v2.HorizontalPodAutoscalerApplyConfiguration, opts v1.ApplyOptions) (*autoscalingv2.HorizontalPodAutoscaler, error) {
	ret := _m.Called(ctx, horizontalPodAutoscaler, opts)

	var r0 *autoscalingv2.HorizontalPodAutoscaler
	if rf, ok := ret.Get(0).(func(context.Context, *v2.HorizontalPodAutoscalerApplyConfiguration, v1.ApplyOptions) *autoscalingv2.HorizontalPodAutoscaler); ok {
		r0 = rf(ctx, horizontalPodAutoscaler, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingv2.HorizontalPodAutoscaler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.HorizontalPodAutoscalerApplyConfiguration, v1.ApplyOptions) error); ok {
		r1 = rf(ctx, horizontalPodAutoscaler, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyStatus provides a mock function with given fields: ctx, horizontalPodAutoscaler, opts
func (_m *HorizontalPodAutoscalerInterface) ApplyStatus(ctx context.Context, horizontalPodAutoscaler *v2.HorizontalPodAutoscalerApplyConfiguration, opts v1.ApplyOptions) (*autoscalingv2.HorizontalPodAutoscaler, error) {
	ret := _m.Called(ctx, horizontalPodAutoscaler, opts)

	var r0 *autoscalingv2.HorizontalPodAutoscaler
	if rf, ok := ret.Get(0).(func(context.Context, *v2.HorizontalPodAutoscalerApplyConfiguration, v1.ApplyOptions) *autoscalingv2.HorizontalPodAutoscaler); ok {
		r0 = rf(ctx, horizontalPodAutoscaler, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingv2.HorizontalPodAutoscaler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.HorizontalPodAutoscalerApplyConfiguration, v1.ApplyOptions) error); ok {
		r1 = rf(ctx, horizontalPodAutoscaler, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, horizontalPodAutoscaler, opts
func (_m *HorizontalPodAutoscalerInterface) Create(ctx context.Context, horizontalPodAutoscaler *autoscalingv2.HorizontalPodAutoscaler, opts v1.CreateOptions) (*autoscalingv2.HorizontalPodAutoscaler, error) {
	ret := _m.Called(ctx, horizontalPodAutoscaler, opts)

	var r0 *autoscalingv2.HorizontalPodAutoscaler
	if rf, ok := ret.Get(0).(func(context.Context, *autoscalingv2.HorizontalPodAutoscaler, v1.CreateOptions) *autoscalingv2.HorizontalPodAutoscaler); ok {
		r0 = rf(ctx, horizontalPodAutoscaler, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingv2.HorizontalPodAutoscaler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *autoscalingv2.HorizontalPodAutoscaler, v1.CreateOptions) error); ok {
		r1 = rf(ctx, horizontalPodAutoscaler, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, name, opts
func (_m *HorizontalPodAutoscalerInterface) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	ret := _m.Called(ctx, name, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.DeleteOptions) error); ok {
		r0 = rf(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCollection provides a mock function with given fields: ctx, opts, listOpts
func (_m *HorizontalPodAutoscalerInterface) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	ret := _m.Called(ctx, opts, listOpts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.DeleteOptions, v1.ListOptions) error); ok {
		r0 = rf(ctx, opts, listOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *HorizontalPodAutoscalerInterface) Get(ctx context.Context, name string, opts v1.GetOptions) (*autoscalingv2.HorizontalPodAutoscaler, error) {
	ret := _m.Called(ctx, name, opts)

	var r0 *autoscalingv2.HorizontalPodAutoscaler
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions) *autoscalingv2.HorizontalPodAutoscaler); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingv2.HorizontalPodAutoscaler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, v1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opts
func (_m *HorizontalPodAutoscalerInterface) List(ctx context.Context, opts v1.ListOptions) (*autoscalingv2.HorizontalPodAutoscalerList, error) {
	ret := _m.Called(ctx, opts)

	var r0 *autoscalingv2.HorizontalPodAutoscalerList
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) *autoscalingv2.HorizontalPodAutoscalerList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingv2.HorizontalPodAutoscalerList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, name, pt, data, opts, subresources
func (_m *HorizontalPodAutoscalerInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (*autoscalingv2.HorizontalPodAutoscaler, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *autoscalingv2.HorizontalPodAutoscaler
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) *autoscalingv2.HorizontalPodAutoscaler); ok {
		r0 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingv2.HorizontalPodAutoscaler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) error); ok {
		r1 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, horizontalPodAutoscaler, opts
func (_m *HorizontalPodAutoscalerInterface) Update(ctx context.Context, horizontalPodAutoscaler *autoscalingv2.HorizontalPodAutoscaler, opts v1.UpdateOptions) (*autoscalingv2.HorizontalPodAutoscaler, error) {
	ret := _m.Called(ctx, horizontalPodAutoscaler, opts)

	var r0 *autoscalingv2.HorizontalPodAutoscaler
	if rf, ok := ret.Get(0).(func(context.Context, *autoscalingv2.HorizontalPodAutoscaler, v1.UpdateOptions) *autoscalingv2.HorizontalPodAutoscaler); ok {
		r0 = rf(ctx, horizontalPodAutoscaler, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingv2.HorizontalPodAutoscaler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *autoscalingv2.HorizontalPodAutoscaler, v1.UpdateOptions) error); ok {
		r1 = rf(ctx, horizontalPodAutoscaler, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, horizontalPodAutoscaler, opts
func (_m *HorizontalPodAutoscalerInterface) UpdateStatus(ctx context.Context, horizontalPodAutoscaler *autoscalingv2.HorizontalPodAutoscaler, opts v1.UpdateOptions) (*autoscalingv2.HorizontalPodAutoscaler, error) {
	ret := _m.Called(ctx, horizontalPodAutoscaler, opts)

	var r0 *autoscalingv2.HorizontalPodAutoscaler
	if rf, ok := ret.Get(0).(func(context.Context, *autoscalingv2.HorizontalPodAutoscaler, v1.UpdateOptions) *autoscalingv2.HorizontalPodAutoscaler); ok {
		r0 = rf(ctx, horizontalPodAutoscaler, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingv2.HorizontalPodAutoscaler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *autoscalingv2.HorizontalPodAutoscaler, v1.UpdateOptions) error); ok {
		r1 = rf(ctx, horizontalPodAutoscaler, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *HorizontalPodAutoscalerInterface) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHorizontalPodAutoscalerInterface creates a new instance of HorizontalPodAutoscalerInterface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewHorizontalPodAutoscalerInterface(t testing.TB) *HorizontalPodAutoscalerInterface {
	mock := &HorizontalPodAutoscalerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
