// Code generated by mockery 2.12.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	testing "testing"

	v1beta1 "k8s.io/client-go/kubernetes/typed/policy/v1beta1"
)

// PolicyV1beta1Interface is an autogenerated mock type for the PolicyV1beta1Interface type
type PolicyV1beta1Interface struct {
	mock.Mock
}

// Evictions provides a mock function with given fields: namespace
func (_m *PolicyV1beta1Interface) Evictions(namespace string) v1beta1.EvictionInterface {
	ret := _m.Called(namespace)

	var r0 v1beta1.EvictionInterface
	if rf, ok := ret.Get(0).(func(string) v1beta1.EvictionInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.EvictionInterface)
		}
	}

	return r0
}

// PodDisruptionBudgets provides a mock function with given fields: namespace
func (_m *PolicyV1beta1Interface) PodDisruptionBudgets(namespace string) v1beta1.PodDisruptionBudgetInterface {
	ret := _m.Called(namespace)

	var r0 v1beta1.PodDisruptionBudgetInterface
	if rf, ok := ret.Get(0).(func(string) v1beta1.PodDisruptionBudgetInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.PodDisruptionBudgetInterface)
		}
	}

	return r0
}

// PodSecurityPolicies provides a mock function with given fields:
func (_m *PolicyV1beta1Interface) PodSecurityPolicies() v1beta1.PodSecurityPolicyInterface {
	ret := _m.Called()

	var r0 v1beta1.PodSecurityPolicyInterface
	if rf, ok := ret.Get(0).(func() v1beta1.PodSecurityPolicyInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.PodSecurityPolicyInterface)
		}
	}

	return r0
}

// RESTClient provides a mock function with given fields:
func (_m *PolicyV1beta1Interface) RESTClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// NewPolicyV1beta1Interface creates a new instance of PolicyV1beta1Interface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPolicyV1beta1Interface(t testing.TB) *PolicyV1beta1Interface {
	mock := &PolicyV1beta1Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
