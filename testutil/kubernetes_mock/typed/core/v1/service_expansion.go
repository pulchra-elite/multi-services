// Code generated by mockery 2.12.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	testing "testing"
)

// ServiceExpansion is an autogenerated mock type for the ServiceExpansion type
type ServiceExpansion struct {
	mock.Mock
}

// ProxyGet provides a mock function with given fields: scheme, name, port, path, params
func (_m *ServiceExpansion) ProxyGet(scheme string, name string, port string, path string, params map[string]string) rest.ResponseWrapper {
	ret := _m.Called(scheme, name, port, path, params)

	var r0 rest.ResponseWrapper
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) rest.ResponseWrapper); ok {
		r0 = rf(scheme, name, port, path, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.ResponseWrapper)
		}
	}

	return r0
}

// NewServiceExpansion creates a new instance of ServiceExpansion. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceExpansion(t testing.TB) *ServiceExpansion {
	mock := &ServiceExpansion{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
